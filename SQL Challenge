create database Assignment;
use Assignment;
create table city      ( FOR DATASET 1)
(
    Id int,
    Name varchar(17),
    Countrycode varchar(3),
    District varchar(20),
    Population int
 );

Insert into city values(6, 'ROTTERDAM', 'NLD', 'ZUID-HOLLAND', 593321);
Insert into city values(3878, 'Scottsdale', 'USA', 'Arizona', 202705);
Insert into city values(3965, 'Corona', 'USA', 'California', 124966);
Insert into city values(3973, 'Concord', 'USA', 'California', 121780);
Insert into city values(3977, 'Cedar Rapids', 'USA', 'Iowa', 120758);
Insert into city values(3982, 'Coral Springs', 'USA', 'Florida', 117549);
Insert into city values(4054, 'Fairfield', 'USA', 'California', 92256);
Insert into city values(4058, 'Boulder', 'USA', 'Colorado', 91238);
Insert into city values(4061, 'Fall River', 'USA', 'MassachusettS', 90555);


## 1Q: Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
Answer: SELECT * from city WHERE population > 100000 and Countrycode = 'USA';

## 2Q: Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.
Answer: SELECT Name from city WHERE Population > 120000 and Countrycode = 'USA';

## Q3: Query all columns (attributes) for every row in the CITY table.
Answer: SELECT * from city;

## Q4: Query all columns for a city in CITY with the ID 1661.
Answer: SELECT * from city WHERE Id = 1661;

## Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN
Answer: SELECT * from city WHERE Countrycode = JPN;

## Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN
Answer: SELECT Name from city WHERE Countrycode = JPN;



create table stations           (FOR DATASET 2)
(
    Id int,
    City varchar(30),
    State varchar(10),
    Lat_N int,
    Long_W int
);

Insert into stations values(794, 'Kissee Mills', 'MO', 139, 73);
Insert into stations values(824, 'Loma Mar', 'CA', 48, 130);
Insert into stations values(603, 'Sandy Hook', 'CT', 72, 148);
Insert into stations values(478, 'Tipton', 'IN', 33, 97);
Insert into stations values(619, 'Arlington', 'CO', 75, 92);
Insert into stations values(711, 'Turner', 'AR', 50, 101);
Insert into stations values(839, 'Slidell', 'LA', 85, 151);
Insert into stations values(411, 'Negreet', 'LA', 98, 105);
Insert into stations values(588, 'Glencoe', 'KY', 46, 136);
Insert into stations values(665, 'Chelsea', 'IA', 98, 59);
Insert into stations values(342, 'Chignik Lagoon', 'AK', 103, 153);
Insert into stations values(733, 'Pelahatchie', 'MS', 38, 28);
Insert into stations values(441, 'Hanna City', 'IL', 50, 136);
Insert into stations values(811, 'Dorrance', 'KS', 102, 121);
Insert into stations values(698, 'Albany', 'CA', 49, 80);
Insert into stations values(325, 'Monument', 'KS', 70, 141);
Insert into stations values(414, 'Manchester', 'MD', 73, 37);
Insert into stations values(113, 'Prescott', 'IA', 39, 65);
Insert into stations values(971, 'Graettinger', 'IA', 94, 150);
Insert into stations values(266, 'Cahone', 'CO', 116, 127);


## Q7. Query a list of CITY and STATE from the STATION table.
Answer: SELECT City, State from stations;

## Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.
Answer: SELECT City from stations WHERE MOD(Id, 2) = 0 order by City;

## Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
Answer: select count(City) - count (DISTINCT(City)) from stations;

## Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
  respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
   largest city, choose the one that comes first when ordered alphabetically.
Answer: select city, length(City) from stations order by length(City) DESC,city limit 1;
        select city, length(City) from stations order by length(City) ASC,city limit 1;


## Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
   cannot contain duplicates.
Answer: SELECT DISTINCT City FROM stations 
        WHERE REGEXP_LIKE(City, '^[aeiouAEIOU]')
        ORDER BY City;

## Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
   contain duplicates.
Answer: SELECT DISTINCT(City) FROM stations WHERE City LIKE '%a' OR City LIKE '%e' OR City LIKE '%i' OR City LIKE '%o' 
           OR City LIKE '%u';
           
## Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
  contain duplicates.
Answer: SELECT DISTINCT City FROM stations 
        WHERE not REGEXP_LIKE(City, '^[aeiouAEIOU]')
        ORDER BY City;
        
## Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
    contain duplicates.
 Answer: SELECT DISTINCT City
          FROM stations
          WHERE City NOT REGEXP '[aeiou]$';
          
## Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
Answer: SELECT City from stations
         WHERE NOT REGEXP_LIKE(City, '^[aeiouAEIOU]') OR City NOT REGEXP '[aeiou]$';
           
## Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.
Answer: SELECT City from stations
         WHERE NOT REGEXP_LIKE(City, '^[aeiouAEIOU]') AND City NOT REGEXP '[aeiou]$';
         
 
 
 
 Dataset:  
 create table product
(
   prod_id int not null,
   prod_name varchar(20),
   unit_price int,
   primary key (prod_id)
);

create table sales
(
    seller_id int,
    prod_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int,
    FOREIGN KEY (prod_id) REFERENCES product(prod_id)

);

insert into product values(1, 'S8', 1000);
insert into product values(2, 'G4', 800);
insert into product values(3, 'iPhone', 1400);

insert into sales values(1, 1, 1, '2019-01-21',2, 2000);
insert into sales values(1, 2, 2, '2019-02-17',1, 800);
insert into sales values(2, 2, 3, '2019-06-02',1, 800);
insert into sales values(3, 3, 4, '2019-05-13',2, 2800);


Q17: Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
Answer: SELECT prod_id, prod_name FROM product WHERE prod_id NOT IN 
     (SELECT prod_id FROM sales WHERE sale_date NOT BETWEEN '2019-01-01' AND '2019-03-31');


Dataset 

create table views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
) ;

Insert into views values(1, 3, 5, '2019-08-01');
Insert into views values(1, 3, 6, '2019-08-02');
Insert into views values(2, 7, 7, '2019-08-01');
Insert into views values(2, 7, 6, '2019-08-02');
Insert into views values(4, 7, 1, '2019-07-22');
Insert into views values(3, 4, 4, '2019-07-21');
Insert into views values(3, 4, 4, '2019-07-21');

Q18: Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
Answer: select distinct author_id
from views
where author_id = viewer_id











           
