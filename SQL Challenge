create database Assignment;
use Assignment;
create table city      ( FOR DATASET 1)
(
    Id int,
    Name varchar(17),
    Countrycode varchar(3),
    District varchar(20),
    Population int
 );

Insert into city values(6, 'ROTTERDAM', 'NLD', 'ZUID-HOLLAND', 593321);
Insert into city values(3878, 'Scottsdale', 'USA', 'Arizona', 202705);
Insert into city values(3965, 'Corona', 'USA', 'California', 124966);
Insert into city values(3973, 'Concord', 'USA', 'California', 121780);
Insert into city values(3977, 'Cedar Rapids', 'USA', 'Iowa', 120758);
Insert into city values(3982, 'Coral Springs', 'USA', 'Florida', 117549);
Insert into city values(4054, 'Fairfield', 'USA', 'California', 92256);
Insert into city values(4058, 'Boulder', 'USA', 'Colorado', 91238);
Insert into city values(4061, 'Fall River', 'USA', 'MassachusettS', 90555);


## 1Q: Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
Answer: SELECT * from city WHERE population > 100000 and Countrycode = 'USA';

## 2Q: Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.
Answer: SELECT Name from city WHERE Population > 120000 and Countrycode = 'USA';

## Q3: Query all columns (attributes) for every row in the CITY table.
Answer: SELECT * from city;

## Q4: Query all columns for a city in CITY with the ID 1661.
Answer: SELECT * from city WHERE Id = 1661;

## Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN
Answer: SELECT * from city WHERE Countrycode = JPN;

## Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN
Answer: SELECT Name from city WHERE Countrycode = JPN;



create table stations           (FOR DATASET 2)
(
    Id int,
    City varchar(30),
    State varchar(10),
    Lat_N int,
    Long_W int
);

Insert into stations values(794, 'Kissee Mills', 'MO', 139, 73);
Insert into stations values(824, 'Loma Mar', 'CA', 48, 130);
Insert into stations values(603, 'Sandy Hook', 'CT', 72, 148);
Insert into stations values(478, 'Tipton', 'IN', 33, 97);
Insert into stations values(619, 'Arlington', 'CO', 75, 92);
Insert into stations values(711, 'Turner', 'AR', 50, 101);
Insert into stations values(839, 'Slidell', 'LA', 85, 151);
Insert into stations values(411, 'Negreet', 'LA', 98, 105);
Insert into stations values(588, 'Glencoe', 'KY', 46, 136);
Insert into stations values(665, 'Chelsea', 'IA', 98, 59);
Insert into stations values(342, 'Chignik Lagoon', 'AK', 103, 153);
Insert into stations values(733, 'Pelahatchie', 'MS', 38, 28);
Insert into stations values(441, 'Hanna City', 'IL', 50, 136);
Insert into stations values(811, 'Dorrance', 'KS', 102, 121);
Insert into stations values(698, 'Albany', 'CA', 49, 80);
Insert into stations values(325, 'Monument', 'KS', 70, 141);
Insert into stations values(414, 'Manchester', 'MD', 73, 37);
Insert into stations values(113, 'Prescott', 'IA', 39, 65);
Insert into stations values(971, 'Graettinger', 'IA', 94, 150);
Insert into stations values(266, 'Cahone', 'CO', 116, 127);


## Q7. Query a list of CITY and STATE from the STATION table.
Answer: SELECT City, State from stations;

## Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.
Answer: SELECT City from stations WHERE MOD(Id, 2) = 0 order by City;

## Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
Answer: select count(City) - count (DISTINCT(City)) from stations;

## Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
  respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
   largest city, choose the one that comes first when ordered alphabetically.
Answer: select city, length(City) from stations order by length(City) DESC,city limit 1;
        select city, length(City) from stations order by length(City) ASC,city limit 1;


## Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
   cannot contain duplicates.
Answer: SELECT DISTINCT City FROM stations 
        WHERE REGEXP_LIKE(City, '^[aeiouAEIOU]')
        ORDER BY City;

## Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
   contain duplicates.
Answer: SELECT DISTINCT(City) FROM stations WHERE City LIKE '%a' OR City LIKE '%e' OR City LIKE '%i' OR City LIKE '%o' 
           OR City LIKE '%u';
           
## Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
  contain duplicates.
Answer: SELECT DISTINCT City FROM stations 
        WHERE not REGEXP_LIKE(City, '^[aeiouAEIOU]')
        ORDER BY City;
        
## Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
    contain duplicates.
 Answer: SELECT DISTINCT City
          FROM stations
          WHERE City NOT REGEXP '[aeiou]$';
          
## Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
Answer: SELECT City from stations
         WHERE NOT REGEXP_LIKE(City, '^[aeiouAEIOU]') OR City NOT REGEXP '[aeiou]$';
           
## Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.
Answer: SELECT City from stations
         WHERE NOT REGEXP_LIKE(City, '^[aeiouAEIOU]') AND City NOT REGEXP '[aeiou]$';
         
 
 
 
 Dataset:  
 create table product
(
   prod_id int not null,
   prod_name varchar(20),
   unit_price int,
   primary key (prod_id)
);

create table sales
(
    seller_id int,
    prod_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int,
    FOREIGN KEY (prod_id) REFERENCES product(prod_id)

);

insert into product values(1, 'S8', 1000);
insert into product values(2, 'G4', 800);
insert into product values(3, 'iPhone', 1400);

insert into sales values(1, 1, 1, '2019-01-21',2, 2000);
insert into sales values(1, 2, 2, '2019-02-17',1, 800);
insert into sales values(2, 2, 3, '2019-06-02',1, 800);
insert into sales values(3, 3, 4, '2019-05-13',2, 2800);


Q17: Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
Answer: SELECT prod_id, prod_name FROM product WHERE prod_id NOT IN 
     (SELECT prod_id FROM sales WHERE sale_date NOT BETWEEN '2019-01-01' AND '2019-03-31');


Dataset 

create table views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
) ;

Insert into views values(1, 3, 5, '2019-08-01');
Insert into views values(1, 3, 6, '2019-08-02');
Insert into views values(2, 7, 7, '2019-08-01');
Insert into views values(2, 7, 6, '2019-08-02');
Insert into views values(4, 7, 1, '2019-07-22');
Insert into views values(3, 4, 4, '2019-07-21');
Insert into views values(3, 4, 4, '2019-07-21');

Q18: Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
Answer: select distinct author_id
from views
where author_id = viewer_id

Dataset 

create table Ads
(
ad_id int,
user_id int,
action varchar (100)
);

insert into Ads
values
(1,1,'Clicked'),
(2,2,'Clicked'),
(3,3,'Viewed'),
(5,5,'Ignored'),
(1,7,'Ignored'),
(2,7,'Viewed'),
(3,5,'Clicked'),
(1,4,'Viewed'),
(2,11,'Viewed'),
(1,2,'Clicked');

Q20: Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
 Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a
  tie.
Answer: select ad_id,
            (case when clicks+views = 0 then 0 else round(clicks/(clicks+views)*100, 2) end) as ctr
        from 
           (select ad_id,
            sum(case when action='Clicked' then 1 else 0 end) as clicks,
            sum(case when action='Viewed' then 1 else 0 end) as views
        from Ads
         group by ad_id) as t
         order by ctr desc, ad_id asc;

Q21: Write an SQL query to find the team size of each of the employees.
Return result table in any order.
Answer: select employee_id, count(team_id)
           over(partition by team_id) as team_size
        from Employee;

Q22: Write an SQL query to find the type of weather in each country for November 2019.
Answer:  select country_name, case when avg(weather_state) <= 15 then "Cold"
                          when avg(weather_state) >= 25 then "Hot"
                          else "Warm" end as weather_type
         from Countries inner join Weather
            on Countries.country_id = Weather.country_id
         where left(day, 7) = '2019-11'
          group by country_name;


Q23: Write an SQL query to find the average selling price for each product. average_price should be
rounded to 2 decimal places.
Answer: select UnitsSold.product_id, round(sum(units*price)/sum(units), 2) as average_price
from UnitsSold 
    inner join Prices on
       UnitsSold.product_id = Prices.product_id
Where UnitsSold.purchase_date between Prices.start_date and Prices.end_date
group by UnitsSold.product_id;

Q24: Write an SQL query to report the first login date for each player.
 Answer: select player_id, min(event_date) as first_login_date from Activity
           group by player_id;

Q25: Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.
Answer: select product_name, sum(unit) as unit
           from Products inner join Orders
             on Products.product_id = Orders.product_id
        where left(order_date, 7) = "2020-02"
           group by Products.product_id
                having sum(unit)>=100;
                
Q26: Write an SQL query to find the users who have valid emails.
Answer: select * from Users
            where  mail regexp '^[A-Za-z][A-Za-z0-9\_\.\-]*@leetcode\.com$';


Q27: Write an SQL query to report the customer_id and customer_name of customers who have spent at
least $100 in each month of June and July 2020.
Answer: select o.customer_id, c.name
        from Customers c, Product p, Orders o
        where c.customer_id = o.customer_id and p.product_id = o.product_id
        group by o.customer_id
        having 
        (
             sum(case when o.order_date like '2020-06%' then o.quantity*p.price else 0 end) >= 100
             and
             sum(case when o.order_date like '2020-07%' then o.quantity*p.price else 0 end) >= 100
        );


Q28: Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
Return the result table in any order.
Answer: SELECT DISTINCT title
       FROM content ct
       INNER JOIN TVProgram tv
       ON ct.content_id = tv.content_id
       WHERE content_type = 'Movies'
       AND Kids_content = 'Y'
       AND program_date BETWEEN '2020-06-01' AND '2020-06-30';

Q29: Write an SQL query to find the npv of each query of the Queries table. 
Answer: select q.id, q.year, ifnull(n.npv,0) as npv
        from queries as q
        left join npv as n
        on (q.id, q.year) = (n.id, n.year);
        
Q30: Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.
Answer: select unique_id, name
        from Employees left join EmployeeUNI
        on Employees.id = EmployeeUNI.id;
        
Q31: Write an SQL query to report the distance travelled by each user.
Answer: select name, sum(ifnull(distance, 0)) as travelled_distance
        from rides r
        right join users u
        on r.user_id = u.id
        group by name
        order by 2 desc,1 asc;
        
 Q32: Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
and their amount.
Answer:select product_name, sum(unit) as unit
       from Products inner join Orders
       on Products.product_id = Orders.product_id
        where left(order_date, 7) = "2020-02"
        group by Products.product_id
         having sum(unit)>=100;
        
        
        
 Q33: Write an SQL query to report the distance travelled by each user.
Return the result table ordered by travelled_distance in descending order, if two or more users
travelled the same distance, order them by their name in ascending order.
Answer: select name, sum(ifnull(distance, 0)) as travelled_distance
        from rides r
          right join users u
            on r.user_id = u.id
          group by name
               order by 2 desc,1 asc;
               
 Q34: Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just
show null.
Answer: select unique_id, name
        from Employees left join EmployeeUNI
        on Employees.id = EmployeeUNI.id;
        
Q35: Write an SQL query to find the id and the name of all students who are enrolled in departments that no
longer exist.
Answer: select s.id, s.name
        from students s
        left join departments d
        on s.department_id = d.id
         where d.id is null;
         
 Q36: Write an SQL query to report the number of calls and the total call duration between each pair of
distinct persons (person1, person2) where person1 < person2.
Answer: SELECT CASE WHEN from_id< to_id THEN from_id ELSE to_id END AS person1,
               CASE WHEN from_id <to_id THEN to_id ELSE from_id END AS person2,
                 COUNT(*) AS call_count,
               SUM(duration) AS total_duration
       FROM Calls 
         GROUP BY person1, person2;
         
 Q37: Write an SQL query to find the average selling price for each product. average_price should be
rounded to 2 decimal places.
Answer: SELECT sl.item_code, 
         ROUND(SUM(sl.sale_qty*ip.item_cost)/SUM(sl.sale_qty),2) AS average_selling_price
        FROM sale sl
         LEFT JOIN item_price ip 
         ON sl.item_code = ip.item_code 
         AND sl.sale_date BETWEEN ip.date_from AND ip.date_to
           GROUP BY item_code;
           
 Q38: Write an SQL query to report the number of cubic feet of volume the inventory occupies in each
warehouse.
Answer: SELECT name AS warehouse_name,
           SUM(units*Width*LENGTH*Height) AS volume
        FROM Warehouse w
         INNER JOIN Products p ON w.product_id = p.product_id
           GROUP BY name
           ORDER BY NULL;
           
 Q39: Write an SQL query to report the difference between the number of apples and oranges sold each day.
Return the result table ordered by sale_date.
Answer: select a.sale_date, a.sold_num - b.sold_num
        from Sales a left join Sales b
         on a.sale_date = b.sale_date
        where a.fruit = 'apples' and b.fruit = 'oranges';
        
Q40: Write an SQL query to report the managers with at least five direct reports.
Return the result table in any order.
Answer: select 
          a.name 
        from employee a 
        inner join employee b 
        on (a.id = b.managerid) 
          group by a.name 
           having count(distinct b.id) >= 5;
           
 Q41: Write an SQL query to report the respective department name and number of students majoring in
each department for all departments in the Department table (even ones with no current students).
Answer: SELECT
    d.dept_name,
    COUNT(s.student_id) AS student_number
  FROM department AS d 
  LEFT JOIN student AS s
   ON d.dept_id = s.dept_id
      GROUP BY 1
       ORDER BY 2 DESC, 1 ASC;
       
  Q42: Write an SQL query to report the customer ids from the Customer table that bought all the products in
the Product table.
Answer: select a.customer_id from
         (select customer_id, count(distinct product_key) as num
        from Customer
           group by customer_id) a
           where a.num = (select count(distinct product_key) from Product);
           
 Q43: Write an SQL query that reports the most experienced employees in each project. In case of a tie,
report all employees with the maximum number of experience years.
Answer: select * from
          (select
              p.project_id, e.employee_id,e.experience_years,
          Rank() over (partition by project_id order by experience_years desc ) as rank_experience
          from Project p join employee e
          on p.employee_id = e.employee_id)
       where rank_experience=1;
       
 Q44: Write an SQL query that reports the books that have sold less than 10 copies in the last year,
excluding books that have been available for less than one month from today. Assume today is
2019-06-23.
Answer: select book_id, name
        from Books
        where book_id not in (select book_id
               from Orders
                where dispatch_date >= '2018-06-23' and dispatch_date <= '2019-06-22'
               group by book_id
                having sum(quantity) >= 10)
       and available_from < '2019-05-23';
       
Q45: Write a SQL query to find the highest grade with its corresponding course for each student. In case of
a tie, you should find the course with the smallest course_id.
Answer: select student_id, min(course_id) as course_id, grade
         from Enrollments
       where (student_id, grade) in 
             (select student_id, max(grade)
          from Enrollments
             group by student_id)
           group by student_id
          order by student_id asc;
          
 Q51: Write an SQL query to report the name, population, and area of the big countries.
 Answer: SELECT
    name, population, area
    FROM
    World
      WHERE area > 3000000 OR population > 25000000;
      
  Q52: Write an SQL query to report the names of the customer that are not referred by the customer with id
= 2.
Answer: select name
from customer
where referee_id != 2 or referee_id is NULL;

Q53: Write an SQL query to report all customers who never order anything. Return the result table in any order.
Answer: select
Name as Customers
from Customers
where Id not in( select CustomerId from Orders );

Q54: Write an SQL query to ﬁnd the team size of each of the employees. Return result table in any order.
Answer: select employee_id,
count(team_id) over(partition by team_id) as team_size 
from Employee
order by employee_id;

Q55: Write an SQL query to ﬁnd the countries where this company can invest. Return the result table in any order.
Answer: select name country from Country c join 
(select left(phone_number,3) code from Person p
 join 
(select distinct caller_id as id,call_duration from(
select caller_id,callee_id,sum(duration) over(partition by caller_id  order by caller_id) 
call_duration from Calls)a order by call_duration desc limit 1)a on 
p.id = a.id)tmp where c.country_code = tmp.code;

Q56: Write an SQL query to report the device that is ﬁrst logged in for each player. Return the result table in any order.
Answer: select player_id,device_id  
from(
select player_id,device_id,event_date,
row_number() over(partition by player_id order by event_date asc) as rw 
from Activity) a
where a.rw = 1;

Q57: Write an SQL query to ﬁnd the customer_number for the customer who has placed the largest number of orders.
Answer: select distinct customer_number from(
select customer_number,count(*) orders_placed from Orders
group by customer_number order by orders_placed desc limit 1)a;

Q58: Write an SQL query to report all the consecutive available seats in the cinema. Return the result table ordered by seat_id in ascending order.
Answer: SELECT
     distinct t1.seat_id
FROM cinema AS t1 JOIN cinema AS t2 on
t1.seat_id <> t2.seat_id
and  abs(t1.seat_id - t2.seat_id) = 1
AND t1.free = 1 AND t2.free = 1
ORDER BY 1 ;

Q59: Write an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name "RED".
Answer: with cte AS
(select sales_id from  Orders o left join  Company c on o.com_id = c.com_id
where c.name ='RED')
select name from SalesPerson where sales_id not IN
(select * from cte);

Q60: Write an SQL query to report for every three line segments whether they can form a triangle. Return the result table in any order.
Answer: select x,y,z,
case
    when 
            x+y>z and y+z>x and z+x> y then 'YES'
    else 'NO'
end as triangle
from Triangle;


        
        
        
        
        
        
        
        
        
        
        
        
